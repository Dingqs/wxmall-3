<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="http://www.springframework.org/schema/beans classpath:/org/springframework/beans/factory/xml/spring-beans-3.0.xsd 
  					http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
  					http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
    
    <!-- 自动扫描与装配bean -->
    <context:component-scan base-package="com.makao"></context:component-scan>
    <!-- 导入外部的properties文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
   
    <!-- 配置SessionFactory -->
    <bean id="sessionFactory" 
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan">
            <list>
                <!-- 可以加多个包 -->
                <value>com.makao.entity</value>
            </list>
        </property>
        <!-- <property name="mappingLocations">
			<list>
				<value>classpath*:/com/makao/hbm/*.hbm.xml</value>
			</list>
		</property>
		<property name="annotatedPackages">
			<list>
				<value>com.makao.entity</value>
			</list> 
		</property> -->
        <property name="hibernateProperties">
	        <props>
	            <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
	            <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
	        </props>
	    </property>
    </bean>
    <!-- 数据库映射 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="url" value="${jdbcUrl}"></property>
        <property name="driverClassName" value="${driverClass}"></property>
        <property name="username" value="${username}"></property>
        <property name="password" value="${password}"></property>
   </bean>
   <!-- redis -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" p:host-name="localhost" p:port="6379" />
	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" p:connection-factory-ref="jedisConnectionFactory"/>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" p:connection-factory-ref="jedisConnectionFactory">
      	<property name="KeySerializer"> 
          <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean> 
	      </property> 
	      <!-- <property name="ValueSerializer"> 
	          <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean> 
	      </property>
	       
	      <property name="HashKeySerializer"> 
	        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean> 
	      </property>   
	      <property name="HashValueSerializer"> 
	        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean> 
	      </property> -->
    </bean>
  <!--   <bean id="inventoryRedisTemplate" class="org.springframework.data.redis.core.RedisTemplate" p:connection-factory-ref="jedisConnectionFactory">
      	<property name="KeySerializer"> 
          <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean> 
	      </property> 
	      <property name="ValueSerializer"> 
	          <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean> 
	      </property>
    </bean> -->
    <!-- 配置声明式事务管理（采用注解的方式） -->
    <bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <tx:annotation-driven transaction-manager="txManager"/>
    
    <!-- quartz -->
    <bean id="approachOrders" class="com.makao.quartz.ApproachOrdersJob"/>
	<bean id="approachDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	    <property name="group" value="job_approach"/>
	    <property name="name" value="job_approach_name"/>
	    <!--false表示等上一个任务执行完后再开启新的任务-->
	    <property name="concurrent" value="false"/>
	    <property name="targetObject">
	        <ref bean="approachOrders"/>
	    </property>
	    <property name="targetMethod">
	        <value>execute</value>
	    </property>
	</bean>
	<!--  approach调度触发器 -->
	<bean id="approachTrigger"
	      class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="name" value="work_approach_name"/>
	    <property name="group" value="work_approach"/>
	    <property name="jobDetail">
	        <ref bean="approachDetail" />
	    </property>
	    <property name="cronExpression">
	        <value>59/5 * * * * ?</value>
	    </property>
	</bean>
	<!--  comfrim orders -->
	<bean id="confirmOrders" class="com.makao.quartz.ComfirmOrdersJob"/>
	<bean id="confirmDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	    <property name="group" value="confirm"/>
	    <property name="name" value="confirm"/>
	    <!--false表示等上一个任务执行完后再开启新的任务-->
	    <property name="concurrent" value="false"/>
	    <property name="targetObject">
	        <ref bean="confirmOrders"/>
	    </property>
	    <property name="targetMethod">
	        <value>execute</value>
	    </property>
	</bean>
	<bean id="confirmTrigger"
	      class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="name" value="work_confirm_name"/>
	    <property name="group" value="work_confirm"/>
	    <property name="jobDetail">
	        <ref bean="confirmDetail" />
	    </property>
	    <property name="cronExpression">
	        <value>59/1 * * * * ?</value>
	    </property>
	</bean>
	<!-- optimize inventory -->
	<bean id="optInventory" class="com.makao.quartz.InventoryOptJob"/>
	<bean id="inventoryDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	    <property name="group" value="inventory"/>
	    <property name="name" value="inventory"/>
	    <!--false表示等上一个任务执行完后再开启新的任务-->
	    <property name="concurrent" value="false"/>
	    <property name="targetObject">
	        <ref bean="optInventory"/>
	    </property>
	    <property name="targetMethod">
	        <value>execute</value>
	    </property>
	</bean>
	<bean id="inventoryTrigger"
	      class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="name" value="work_inventory_name"/>
	    <property name="group" value="work_inventory"/>
	    <property name="jobDetail">
	        <ref bean="inventoryDetail" />
	    </property>
	    <property name="cronExpression">
	        <value>0 */3 * * * ?</value>
	    </property>
	</bean>
	<!-- terminate orders -->
	<bean id="terminate" class="com.makao.quartz.TerminateOrdersJob"/>
	<bean id="terminateDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	    <property name="group" value="terminate"/>
	    <property name="name" value="terminate"/>
	    <!--false表示等上一个任务执行完后再开启新的任务-->
	    <property name="concurrent" value="false"/>
	    <property name="targetObject">
	        <ref bean="terminate"/>
	    </property>
	    <property name="targetMethod">
	        <value>execute</value>
	    </property>
	</bean>
	<bean id="terminateTrigger"
	      class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="name" value="work_terminate_name"/>
	    <property name="group" value="work_terminate"/>
	    <property name="jobDetail">
	        <ref bean="terminateDetail" />
	    </property>
	    <property name="cronExpression">
	        <value>0 */5 * * * ?</value>
	    </property>
	</bean>
	
	<!-- 调度工厂 -->
	<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
	        <list>
	            <ref bean="approachTrigger"/>
	            <ref bean="confirmTrigger"/>
	            <ref bean="inventoryTrigger"/>
	            <ref bean="terminateTrigger"/>
	        </list>
	    </property>
	</bean>
     <!-- quartz -->
</beans>